import { useIsMobile } from '@/hooks/use-mobile';

type SlideProps = {
  title?: string;
  children: React.ReactNode;
  withGridBackground?: boolean;
};

const Slide: React.FC<SlideProps> = ({ title, children, withGridBackground = false }) => {
  const isMobile = useIsMobile();
  
  return (
    <div className={`w-full p-6 md:p-12 ${withGridBackground ? 'bg-grid-pattern' : ''} ${isMobile ? 'min-h-screen' : 'h-screen'}`}>
      <div className={`container mx-auto max-w-7xl ${isMobile ? '' : 'h-full'}`}>
        {title && <h2 className="text-2xl md:text-3xl font-bold mb-8">{title}</h2>}
        <div className={`${isMobile ? '' : 'h-[calc(100%-4rem)]'}`}>
          {children}
        </div>
      </div>
    </div>
  );
};

export default Slide;



import React from 'react';
import { useIsMobile } from '@/hooks/use-mobile';
import { useSlideScaling } from '@/hooks/use-slide-scaling';

type SlideContentProps = {
  children: React.ReactNode;
  className?: string;
};

/**
 * SlideContent - A wrapper for slide content that handles responsive behavior
 * On mobile: Content can scroll naturally
 * On desktop: Content is scaled to fit within the viewport without scrolling
 */
const SlideContent: React.FC<SlideContentProps> = ({ children, className = '' }) => {
  const isMobile = useIsMobile();
  const { contentRef, scale } = useSlideScaling();
  
  return (
    <div className={`${isMobile ? '' : 'h-full flex flex-col items-center justify-center'} ${className}`}>
      <div 
        ref={contentRef}
        className={`${isMobile ? '' : 'transform-origin-center'}`}
        style={{
          transformOrigin: 'center center',
          maxWidth: isMobile ? '100%' : `${100 / scale}%`
        }}
      >
        {children}
      </div>
    </div>
  );
};

export default SlideContent; 




import { useEffect, useState, useRef } from 'react';
import { useIsMobile } from './use-mobile';

/**
 * A hook that handles dynamic content scaling for slides on desktop
 * On desktop: Automatically scales content to fit in viewport without scrolling
 * On mobile: Does nothing (mobile devices should allow scrolling)
 */
export function useSlideScaling() {
  const isMobile = useIsMobile();
  const contentRef = useRef<HTMLDivElement>(null);
  const [scale, setScale] = useState(1);
  
  useEffect(() => {
    if (isMobile || !contentRef.current) return;
    
    const handleResize = () => {
      const content = contentRef.current;
      if (!content) return;
      
      // Reset scale to measure true size
      content.style.transform = 'scale(1)';
      
      const viewportHeight = window.innerHeight - 100; // Allow for some padding
      const contentHeight = content.scrollHeight;
      
      if (contentHeight > viewportHeight) {
        const newScale = viewportHeight / contentHeight;
        setScale(newScale);
        content.style.transform = `scale(${newScale})`;
      } else {
        setScale(1);
        content.style.transform = 'scale(1)';
      }
    };
    
    handleResize();
    window.addEventListener('resize', handleResize);
    
    return () => {
      window.removeEventListener('resize', handleResize);
    };
  }, [isMobile]);
  
  return { contentRef, scale };
} 




import React from 'react';
import { useIsMobile } from '@/hooks/use-mobile';
import { useSlideScaling } from '@/hooks/use-slide-scaling';

type SlideContentProps = {
  children: React.ReactNode;
  className?: string;
};

/**
 * SlideContent - A wrapper for slide content that handles responsive behavior
 * On mobile: Content can scroll naturally
 * On desktop: Content is scaled to fit within the viewport without scrolling
 */
const SlideContent: React.FC<SlideContentProps> = ({ children, className = '' }) => {
  const isMobile = useIsMobile();
  const { contentRef, scale } = useSlideScaling();
  
  return (
    <div className={`${isMobile ? '' : 'h-full flex flex-col items-center justify-center'} ${className}`}>
      <div 
        ref={contentRef}
        className={`${isMobile ? '' : 'transform-origin-center'}`}
        style={{
          transformOrigin: 'center center',
          maxWidth: isMobile ? '100%' : `${100 / scale}%`
        }}
      >
        {children}
      </div>
    </div>
  );
};

export default SlideContent; 




import { useIsMobile } from '@/hooks/use-mobile';

type SlideProps = {
  title?: string;
  children: React.ReactNode;
  withGridBackground?: boolean;
};

const Slide: React.FC<SlideProps> = ({ title, children, withGridBackground = false }) => {
  const isMobile = useIsMobile();
  
  return (
    <div className={`w-full p-6 md:p-12 ${withGridBackground ? 'bg-grid-pattern' : ''} ${isMobile ? 'min-h-screen' : 'h-screen'}`}>
      <div className={`container mx-auto max-w-7xl ${isMobile ? '' : 'h-full'}`}>
        {title && <h2 className="text-2xl md:text-3xl font-bold mb-8">{title}</h2>}
        <div className={`${isMobile ? '' : 'h-[calc(100%-4rem)]'}`}>
          {children}
        </div>
      </div>
    </div>
  );
};

export default Slide;




<EXAMPLE>

'use client';

import React from 'react';
import { motion } from 'framer-motion';
import Slide from '@/components/core/Slide';
import SlideContent from '@/components/core/SlideContent';

// Animation variants
const containerVariants = {
  hidden: { opacity: 0 },
  visible: {
    opacity: 1,
    transition: {
      staggerChildren: 0.2,
      delayChildren: 0.3
    }
  }
};

const itemVariants = {
  hidden: { y: 20, opacity: 0 },
  visible: {
    y: 0,
    opacity: 1,
    transition: {
      duration: 0.5,
      ease: "easeOut"
    }
  }
};

const logoVariants = {
  hidden: { scale: 0.8, opacity: 0 },
  visible: {
    scale: 1,
    opacity: 1,
    transition: {
      duration: 0.5,
      ease: "easeOut"
    }
  }
};

const underlineVariants = {
  hidden: { width: 0, opacity: 0 },
  visible: {
    width: "100%",
    opacity: 1,
    transition: {
      duration: 0.7,
      ease: "easeOut"
    }
  }
};

const valueVariants = {
  hidden: { x: -50, opacity: 0 },
  visible: {
    x: 0,
    opacity: 1,
    transition: {
      duration: 0.5,
      ease: "easeOut",
      delay: 0.8
    }
  }
};

const CompanyOverview: React.FC = () => {
  return (
    <Slide withGridBackground={true}>
      <SlideContent>
        <motion.div
          variants={containerVariants}
          initial="hidden"
          animate="visible"
          className="flex flex-col items-center text-center w-full"
        >
          <motion.div className="z-10 flex flex-col items-center text-center mt-8 mb-4">
            <motion.div
              variants={logoVariants}
              className="w-[220px] h-[70px] bg-blue-600 border border-blue-600 mb-4 flex items-center justify-center text-white font-bold tracking-wider relative overflow-hidden shadow-lg shadow-blue-500/50 before:content-['>>'_] before:absolute before:left-4 before:text-white/70"
            >
              HANDRECEIPT
            </motion.div>
            
            <motion.h1
              variants={itemVariants}
              className="text-[clamp(2.5rem,6vw,3.5rem)] font-bold text-gray-900 dark:text-gray-100 mb-2 leading-tight font-mono uppercase tracking-wider"
            >
              SECURE SUPPLY VERIFICATION
            </motion.h1>
            
            <motion.div
              variants={underlineVariants}
              className="w-30 h-[3px] bg-blue-600 my-6 mx-auto relative before:content-[''] before:absolute before:w-10 before:h-[3px] before:bg-blue-400 before:right-[-20px] before:top-0"
            />
            
            <motion.h2
              variants={itemVariants}
              className="text-[clamp(1.2rem,3vw,1.8rem)] font-medium text-gray-600 dark:text-gray-300 max-w-[70%] mx-auto font-mono"
            >
              Military-grade validation adapted for commercial markets
            </motion.h2>
          </motion.div>
          
          <div className="flex-grow z-10 flex flex-col justify-center items-center w-full">
            <motion.div
              variants={valueVariants}
              className="p-6 md:p-8 bg-white dark:bg-gray-800 border-l-4 border-blue-600 max-w-[80%] shadow-lg relative before:content-['//_'] before:absolute before:left-[-25px] before:top-1/2 before:-translate-y-1/2 before:text-blue-600 before:font-mono before:text-sm"
            >
              <p className="text-lg text-gray-600 dark:text-gray-300 leading-relaxed font-mono">
                HandReceipt delivers dual-market supply chain verification for{' '}
                <span className="text-blue-600 font-medium">MILITARY</span> and{' '}
                <span className="text-blue-600 font-medium">COMMERCIAL</span> applications, providing tamper-proof inventory management with cryptographic authentication.
              </p>
            </motion.div>
          </div>
        </motion.div>
      </SlideContent>
    </Slide>
  );
};

export default CompanyOverview;



</EXAMPLE>